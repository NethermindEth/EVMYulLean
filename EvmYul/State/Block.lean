import Mathlib.Data.Finset.Basic

import EvmYul.State.BlockHeader
import EvmYul.State.Transaction
import EvmYul.State.Withdrawal

namespace EvmYul

instance : Repr (Finset BlockHeader) := ‚ü®Œª _ _ ‚Ü¶ "Dummy Repr for ommers. TODO - change this :)."‚ü©

abbrev Transactions := Array Transaction

abbrev Withdrawals := Array Withdrawal

/--
`Block`. `B<x>`. Section 4.3.
`blockHeader`  `H`
`transactions` `T`
`ommers`       `U` [deprecated]
-/
structure Block where
  blockHeader  : BlockHeader
  rlp          : ByteArray
  transactions : Transactions
  withdrawals  : Withdrawals
  exception    : String
  -- An empty array which was previously reserved for ommer block headers,
  ommers       : Array BlockHeader := ‚àÖ
  -- blocknumber  : Nat
  deriving BEq, Inhabited, Repr

attribute [deprecated] Block.ommers

abbrev Blocks := Array Block

def deserializeBlock (rlp : ByteArray) : Option BlockHeader :=
  match deserializeRLP rlp with
    | some (.ùïÉ [header, transactions, _, withdrawals]) => do
      let header ‚Üê parseHeader header
      pure header
    | _ => none
 where
  parseHeader : ùïã ‚Üí Option BlockHeader
    | .ùïÉ
      [ .ùîπ parentHash
      , .ùîπ uncleHash
      , .ùîπ coinbase
      , .ùîπ stateRoot
      , .ùîπ transactionsTrie
      , .ùîπ receiptTrie
      , .ùîπ bloom
      , .ùîπ difficulty
      , .ùîπ number
      , .ùîπ gasLimit
      , .ùîπ gasUsed
      , .ùîπ timestamp
      , .ùîπ extraData
      , .ùîπ mixHash
      , .ùîπ nonce
      , .ùîπ baseFeePerGas
      , .ùîπ withdrawalsRoot
      , .ùîπ blobGasUsed
      , .ùîπ excessBlobGas
      , .ùîπ parentBeaconBlockRoot
      ]
      => some <|
        BlockHeader.mk
          (.ofNat <| fromByteArrayBigEndian parentHash)
          (.ofNat <| fromByteArrayBigEndian uncleHash)
          (.ofNat <| fromByteArrayBigEndian coinbase)
          (.ofNat <| fromByteArrayBigEndian stateRoot)
          (.ofNat <| fromByteArrayBigEndian transactionsTrie)
          (.ofNat <| fromByteArrayBigEndian receiptTrie)
          bloom
          (fromByteArrayBigEndian difficulty)
          (fromByteArrayBigEndian number)
          (fromByteArrayBigEndian gasLimit)
          (fromByteArrayBigEndian gasUsed)
          (fromByteArrayBigEndian timestamp)
          extraData
          (.ofNat <| fromByteArrayBigEndian nonce)
          (.ofNat <| fromByteArrayBigEndian mixHash)
          (fromByteArrayBigEndian baseFeePerGas)
          parentBeaconBlockRoot
          (some withdrawalsRoot)
          (some <| .ofNat <| fromByteArrayBigEndian blobGasUsed)
          (some <| .ofNat <| fromByteArrayBigEndian excessBlobGas)
    | _ => none

end EvmYul
