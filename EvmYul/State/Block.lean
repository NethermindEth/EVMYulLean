import Mathlib.Data.Finset.Basic

import EvmYul.State.BlockHeader
import EvmYul.State.Transaction
import EvmYul.State.Withdrawal

namespace EvmYul

instance : Repr (Finset BlockHeader) := ‚ü®Œª _ _ ‚Ü¶ "Dummy Repr for ommers. TODO - change this :)."‚ü©

abbrev Transactions := Array Transaction

abbrev Withdrawals := Array Withdrawal

/--
`Block`. `B<x>`. Section 4.3.
`blockHeader`  `H`
`transactions` `T`
`ommers`       `U` [deprecated]
-/
structure Block where
  blockHeader  : BlockHeader
  rlp          : ByteArray
  transactions : Transactions
  withdrawals  : Withdrawals
  exception    : String
deriving BEq, Inhabited, Repr

abbrev Blocks := Array Block

def deserializeBlock (rlp : ByteArray) : Option (BlockHeader √ó Transactions √ó Withdrawals) :=
  match deserializeRLP rlp with
    | some (.ùïÉ [header, transactions, _, withdrawals]) => do
      let header ‚Üê parseHeader header
      let transactions ‚Üê parseTransactions transactions
      let withdrawals ‚Üê parseWithdrawals withdrawals
      pure (header, Array.mk transactions, Array.mk withdrawals)
    | none =>
      dbg_trace "RLP error: deserializeRLP returned none"
      none
    | _ =>
      dbg_trace "RLP error: deserializeRLP returned wrong rlp structure"
      none
 where
  parseWithdrawal : ùïã ‚Üí Option Withdrawal
    | .ùïÉ [.ùîπ globalIndex, .ùîπ validatorIndex, .ùîπ recipient, .ùîπ amount] =>
      pure <|
        .mk
          (.ofNat <| fromByteArrayBigEndian globalIndex)
          (.ofNat <| fromByteArrayBigEndian validatorIndex)
          (.ofNat <| fromByteArrayBigEndian recipient)
          (.ofNat <| fromByteArrayBigEndian amount)
    | _ =>
      dbg_trace "RLP error: parseWithdrawal returns none"
      none
  parseWithdrawals : ùïã ‚Üí Option (List Withdrawal)
    | .ùïÉ withdrawals => withdrawals.mapM parseWithdrawal
    | .ùîπ ‚ü®#[]‚ü© => some []
    | _ =>
      dbg_trace "RLP error: parseWithdrawals returns none"
      none

  parseStorageKey : ùïã ‚Üí Option UInt256
    | .ùîπ key => some <| .ofNat <| fromByteArrayBigEndian key
    | _ =>
      dbg_trace "RLP error: parseStorageKey returns none"
      none
  parseAccessListEntry : ùïã ‚Üí Option (AccountAddress √ó Array UInt256)
    | .ùïÉ [.ùîπ accountAddress, .ùïÉ storageKeys] => do
      let storageKeys ‚Üê storageKeys.mapM parseStorageKey
      let accountAddress : AccountAddress := .ofNat <| fromByteArrayBigEndian accountAddress
      pure (accountAddress, Array.mk storageKeys)
    | _ =>
      dbg_trace "RLP error: parseAccessListEntry returns none"
      none
  parseBlobVersionHash : ùïã ‚Üí Option ByteArray
    | .ùîπ hash => some hash
    | _ =>
      dbg_trace "RLP error: parseBlobVersionHash returns none"
      none
  parseTransaction : ùïã ‚Üí Option Transaction
    | .ùîπ typePlusPayload => -- Transaction type > 0
      match deserializeRLP (typePlusPayload.extract 1 typePlusPayload.size) with
        | some -- Type 3 transactions
          (.ùïÉ
            [ .ùîπ chainId
            , .ùîπ nonce
            , .ùîπ maxPriorityFeePerGas
            , .ùîπ maxFeePerGas
            , .ùîπ gasLimit
            , .ùîπ recipient
            , .ùîπ value
            , .ùîπ p
            , .ùïÉ accessList
            , .ùîπ maxFeePerBlobGas
            , .ùïÉ blobVersionedHashes
            , .ùîπ y
            , .ùîπ r
            , .ùîπ s
            ]
          ) => do
            let recipient : Option AccountAddress:=
              if recipient.isEmpty then none
              else some <| .ofNat <| fromByteArrayBigEndian recipient
            let accessList ‚Üê accessList.mapM parseAccessListEntry

            let base : Transaction.Base :=
              .mk
                (.ofNat <| fromByteArrayBigEndian nonce)
                (.ofNat <| fromByteArrayBigEndian gasLimit)
                recipient
                (.ofNat <| fromByteArrayBigEndian value)
                r
                s
                p
            let withAccessList : Transaction.WithAccessList :=
              .mk
                (.ofNat <| fromByteArrayBigEndian chainId)
                accessList
                (.ofNat <| fromByteArrayBigEndian y)
            let maxPriorityFeePerGas := .ofNat <| fromByteArrayBigEndian maxPriorityFeePerGas
            let maxFeePerGas := .ofNat <| fromByteArrayBigEndian maxFeePerGas
            let maxFeePerBlobGas := .ofNat <| fromByteArrayBigEndian maxFeePerBlobGas
            let blobVersionedHashes ‚Üê blobVersionedHashes.mapM parseBlobVersionHash
            -- dbg_trace s!" blobVersionedHashes"
            -- _ ‚Üê blobVersionedHashes.forM Œª bvh ‚Ü¶
            --   dbg_trace s!"{EvmYul.toHex bvh}"
            --   pure ()
            let dynamicFeeTransaction : DynamicFeeTransaction := .mk base withAccessList maxFeePerGas maxPriorityFeePerGas
            some <| .blob <| BlobTransaction.mk dynamicFeeTransaction maxFeePerBlobGas blobVersionedHashes
        | some -- Type 2 transactions
          (.ùïÉ
            [ .ùîπ chainId
            , .ùîπ nonce
            , .ùîπ maxPriorityFeePerGas
            , .ùîπ maxFeePerGas
            , .ùîπ gasLimit
            , .ùîπ recipient
            , .ùîπ value
            , .ùîπ p
            , .ùïÉ accessList
            , .ùîπ y
            , .ùîπ r
            , .ùîπ s
            ]
          ) => do
            let recipient : Option AccountAddress:=
              if recipient.isEmpty then none
              else some <| .ofNat <| fromByteArrayBigEndian recipient
            let accessList ‚Üê accessList.mapM parseAccessListEntry
            -- dbg_trace s!" chainId  = {EvmYul.toHex chainId}"
            -- dbg_trace s!" nonce    = {EvmYul.toHex nonce}"
            -- dbg_trace s!" maxPriorityFeePerGas = {EvmYul.toHex maxPriorityFeePerGas}"
            -- dbg_trace s!" maxFeePerGas = {EvmYul.toHex maxFeePerGas}"
            -- dbg_trace s!" gasLimit = {EvmYul.toHex gasLimit}"
            -- dbg_trace s!" recipient: {recipient.map (EvmYul.toHex ‚àò BE)}"
            -- dbg_trace s!" value = {EvmYul.toHex value}"
            -- dbg_trace s!" data = {EvmYul.toHex p}"
            -- dbg_trace s!" accestList = {accessList}"
            -- dbg_trace s!" v = {EvmYul.toHex y}"
            -- dbg_trace s!" r: {EvmYul.toHex r}"
            -- dbg_trace s!" s: {EvmYul.toHex s}"

            let base : Transaction.Base :=
              .mk
                (.ofNat <| fromByteArrayBigEndian nonce)
                (.ofNat <| fromByteArrayBigEndian gasLimit)
                recipient
                (.ofNat <| fromByteArrayBigEndian value)
                r
                s
                p
            let withAccessList : Transaction.WithAccessList :=
              .mk
                (.ofNat <| fromByteArrayBigEndian chainId)
                accessList
                (.ofNat <| fromByteArrayBigEndian y)
            let maxPriorityFeePerGas := .ofNat <| fromByteArrayBigEndian maxPriorityFeePerGas
            let maxFeePerGas := .ofNat <| fromByteArrayBigEndian maxFeePerGas
            some <| .dynamic <| DynamicFeeTransaction.mk base withAccessList maxPriorityFeePerGas maxFeePerGas
        | some -- Type 1 transactions
          (.ùïÉ
            [ .ùîπ chainId
            , .ùîπ nonce
            , .ùîπ gasPrice
            , .ùîπ gasLimit
            , .ùîπ recipient
            , .ùîπ value
            , .ùîπ p
            , .ùïÉ accessList
            , .ùîπ y
            , .ùîπ r
            , .ùîπ s
            ]
          ) => do
            let recipient : Option AccountAddress:=
              if recipient.isEmpty then none
              else some <| .ofNat <| fromByteArrayBigEndian recipient
            let accessList ‚Üê accessList.mapM parseAccessListEntry
            -- dbg_trace s!" chainId  = {EvmYul.toHex chainId}"
            -- dbg_trace s!" nonce    = {EvmYul.toHex nonce}"
            -- dbg_trace s!" gasPrice = {EvmYul.toHex gasPrice}"
            -- dbg_trace s!" gasLimit = {EvmYul.toHex gasLimit}"
            -- dbg_trace s!" recipient: {recipient.map (EvmYul.toHex ‚àò BE)}"
            -- dbg_trace s!" value = {EvmYul.toHex value}"
            -- dbg_trace s!" data = {EvmYul.toHex p}"
            -- dbg_trace s!" accestList = {accessList}"
            -- dbg_trace s!" v = {EvmYul.toHex y}"
            -- dbg_trace s!" r: {EvmYul.toHex r}"
            -- dbg_trace s!" s: {EvmYul.toHex s}"

            let base : Transaction.Base :=
              .mk
                (.ofNat <| fromByteArrayBigEndian nonce)
                (.ofNat <| fromByteArrayBigEndian gasLimit)
                recipient
                (.ofNat <| fromByteArrayBigEndian value)
                r
                s
                p
            let withAccessList : Transaction.WithAccessList :=
              .mk
                (.ofNat <| fromByteArrayBigEndian chainId)
                accessList
                (.ofNat <| fromByteArrayBigEndian y)
            let gasPrice := .ofNat <| fromByteArrayBigEndian gasPrice
            some <| .access <| AccessListTransaction.mk base withAccessList ‚ü®gasPrice‚ü©
        | _ =>
          dbg_trace "RLP error: deserializeRLP could not parse non-legacy transaction"
          none
    | .ùïÉ
      [ .ùîπ nonce
      , .ùîπ gasPrice
      , .ùîπ gasLimit
      , .ùîπ recipient
      , .ùîπ value
      , .ùîπ p
      , .ùîπ w
      , .ùîπ r
      , .ùîπ s
      ] =>
        let recipient : Option AccountAddress:=
          if recipient.isEmpty then none
          else some <| .ofNat <| fromByteArrayBigEndian recipient
        -- dbg_trace s!"Deserialized legacy transaction"
        -- dbg_trace s!" nonce: {EvmYul.toHex nonce}"
        -- dbg_trace s!" gasPrice: {EvmYul.toHex gasPrice}"
        -- dbg_trace s!" gasLimit: {EvmYul.toHex gasLimit}"
        -- dbg_trace s!" recipient: {recipient.map (EvmYul.toHex ‚àò BE)}"
        -- dbg_trace s!" value: {EvmYul.toHex value}"
        -- dbg_trace s!" data: {EvmYul.toHex p}"
        -- dbg_trace s!" w: {EvmYul.toHex w}"
        -- dbg_trace s!" r: {EvmYul.toHex r}"
        -- dbg_trace s!" s: {EvmYul.toHex s}"
        let base : Transaction.Base :=
          Transaction.Base.mk
            (.ofNat <| fromByteArrayBigEndian nonce)
            (.ofNat <| fromByteArrayBigEndian gasLimit)
            recipient
            (.ofNat <| fromByteArrayBigEndian value)
            r
            s
            p
        let gasPrice := .ofNat <| fromByteArrayBigEndian gasPrice
        let w := .ofNat <| fromByteArrayBigEndian w
        some <| .legacy <| LegacyTransaction.mk base ‚ü®gasPrice‚ü© w
    | _ =>
      dbg_trace "RLP error: parseTransaction returns none"
      none
  parseTransactions : ùïã ‚Üí Option (List Transaction)
    | .ùïÉ transactions => transactions.mapM parseTransaction
    | .ùîπ ‚ü®#[]‚ü© => some []
    | _ =>
      dbg_trace "RLP error: parseTransactionS returns none"
      none
  parseHeader : ùïã ‚Üí Option BlockHeader
    | .ùïÉ
      [ .ùîπ parentHash
      , .ùîπ uncleHash
      , .ùîπ coinbase
      , .ùîπ stateRoot
      , .ùîπ transactionsTrie
      , .ùîπ receiptTrie
      , .ùîπ bloom
      , .ùîπ difficulty
      , .ùîπ number
      , .ùîπ gasLimit
      , .ùîπ gasUsed
      , .ùîπ timestamp
      , .ùîπ extraData
      , .ùîπ mixHash
      , .ùîπ nonce
      , .ùîπ baseFeePerGas
      , .ùîπ withdrawalsRoot
      , .ùîπ blobGasUsed
      , .ùîπ excessBlobGas
      , .ùîπ parentBeaconBlockRoot
      ]
      => some <|
        BlockHeader.mk
          (.ofNat <| fromByteArrayBigEndian parentHash)
          (.ofNat <| fromByteArrayBigEndian uncleHash)
          (.ofNat <| fromByteArrayBigEndian coinbase)
          (.ofNat <| fromByteArrayBigEndian stateRoot)
          (.ofNat <| fromByteArrayBigEndian transactionsTrie)
          (.ofNat <| fromByteArrayBigEndian receiptTrie)
          bloom
          (fromByteArrayBigEndian difficulty)
          (fromByteArrayBigEndian number)
          (fromByteArrayBigEndian gasLimit)
          (fromByteArrayBigEndian gasUsed)
          (fromByteArrayBigEndian timestamp)
          extraData
          (.ofNat <| fromByteArrayBigEndian nonce)
          (.ofNat <| fromByteArrayBigEndian mixHash)
          (fromByteArrayBigEndian baseFeePerGas)
          parentBeaconBlockRoot
          (some withdrawalsRoot)
          (some <| .ofNat <| fromByteArrayBigEndian blobGasUsed)
          (some <| .ofNat <| fromByteArrayBigEndian excessBlobGas)
    | _ =>
      dbg_trace "Block header has wrong RLP structure"
      none

end EvmYul
